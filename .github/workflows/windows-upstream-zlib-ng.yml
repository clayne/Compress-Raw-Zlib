name: Windows + upstream zlib-ng

on:
  workflow_dispatch:
  push:
  pull_request:
  schedule:
    - cron: '01 01 * * 6'    # Run every Saturday

jobs:
  build:

    runs-on: windows-latest

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        perl:
          - '5.36'
        zlib-version:
          - 'develop'
          - '2.1.3'
          # - '2.1.2'
          # - '2.0.7'
          # - '2.0.6'
          # - '2.0.5'
          # - '2.0.4'
          # - '2.0.3'
          # - '2.0.2'
          # - '2.0.1'
          # - '2.0.0'
        zlib-native:
          - 1
          - 0

    name: Perl ${{ matrix.perl }} with zlib-ng ${{matrix.zlib-version}}  USE_ZLIB_NG=${{ matrix.zlib-native }}
    steps:
    - uses: actions/checkout@v3

    # - name: Set Env
    #   run: |
    #     echo "zlib-source=${GITHUB_WORKSPACE}/upstream-zlib-source-${{ matrix.zlib-version }}"  >> $GITHUB_ENV
    #     echo "zlib-install=${HOME}/upstream-zlib-install-${{ matrix.zlib-version }}"            >> $GITHUB_ENV
    #     echo "ZLIB_LIB=${HOME}/upstream-zlib-install-${{ matrix.zlib-version }}/lib"            >> $GITHUB_ENV
    #     echo "ZLIB_INCLUDE=${HOME}/upstream-zlib-install-${{ matrix.zlib-version }}/include"    >> $GITHUB_ENV
    #     echo "ZLIB_VERSION=${{ matrix.zlib-version }}"                                          >> $GITHUB_ENV
    #     echo "BUILD_ZLIB=0"                                                                     >> $GITHUB_ENV
    #     echo "ZLIB_NG_PRESENT=1"                                                                >> $GITHUB_ENV

    - name: Set GITHUB_WORKSPACE_UNIX
      run: |
        perl -e '$a = shift; $a =~ s#^(.):\\#q[/] . lc($1) . q[/]#e; $a =~ s#\\#/#g; print qq[GITHUB_WORKSPACE_UNIX=$a]' ${GITHUB_WORKSPACE} >> $GITHUB_ENV
      shell: bash

    - name: Set Env
      run: |
        echo "zlib-source=${GITHUB_WORKSPACE}\upstream-zlib-source-${{ matrix.zlib-version }}"  >> $GITHUB_ENV
        echo "zlib-source-unix=${{ env.GITHUB_WORKSPACE_UNIX }}/upstream-zlib-source-${{ matrix.zlib-version }}"  >> $GITHUB_ENV
        echo "zlib-install=${GITHUB_WORKSPACE}\upstream-zlib-install-${{ matrix.zlib-version }}"            >> $GITHUB_ENV
        echo "zlib-install-unix=${{ env.GITHUB_WORKSPACE_UNIX }}/upstream-zlib-install-${{ matrix.zlib-version }}"            >> $GITHUB_ENV
      shell: bash

    - name: Set Env
      run: |
        env | sort
      shell: bash

    - name: Set Env
      run: |
        set
      shell: cmd

    - name: Checkout upstream zlib-ng ${{matrix.zlib-version}}
      uses: actions/checkout@v3
      with:
        repository: zlib-ng/zlib-ng
        ref: ${{ matrix.zlib-version }}
        path: ${{ env.zlib-source }}

    # - name: Build zlib-ng ${{matrix.zlib-version}} in zlib-compat mode
    #   if: ${{ ! matrix.zlib-native }}
    #   run: |
    #     pwd
    #     ls -l
    #     ./configure --prefix ${{ env.zlib-install }} --libdir ${{ env.zlib-install }}/lib  --zlib-compat
    #     make
    #     make test
    #     make install
    #   working-directory: ${{ env.zlib-source }}
    #   shell: bash

    # - name: Build zlib-ng ${{matrix.zlib-version}} zlib native mode
    #   if: ${{ matrix.zlib-native }}
    #   run: |
    #     ./configure --prefix ${{ env.zlib-install }} --libdir ${{ env.zlib-install }}/lib
    #     make
    #     make test
    #     make install
    #   working-directory: ${{ env.zlib-source }}
    #   shell: bash

    - name: Build zlib-ng ${{matrix.zlib-version}} in zlib-compat mode
      if: ${{ ! matrix.zlib-native }}
      run: |
        cmake -G Ninja -S . -B .  \
          --install-prefix=${{ env.zlib-install-unix }} \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_BUILD_TYPE='Release' \
          -DBUILD_SHARED_LIBS='ON' \
          -DWITH_FUZZERS=OFF \
          -DWITH_MAINTAINER_WARNINGS=OFF \
          -DZLIB_COMPAT=ON
        cmake --build .
        cmake --install .
      # env:
      #   CC: gccc
      #   CXX: g++
      # run: |
      #   pwd
      #   ls -l
      #   cmake -G Ninja
      #     --prefix ${{ env.zlib-install }} --libdir ${{ env.zlib-install }}/lib  --zlib-compat
      #   make
      #   make test
      #   make install
      working-directory: ${{ env.zlib-source }}
      shell: bash

    - name: Build zlib-ng ${{matrix.zlib-version}} in zlib native mode
      if: ${{ matrix.zlib-native }}
      run: |
        cmake -G Ninja -S . -B .  \
          --install-prefix=${{ env.zlib-install-unix }} \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_BUILD_TYPE='Release' \
          -DBUILD_SHARED_LIBS='ON' \
          -DWITH_FUZZERS=OFF \
          -DWITH_MAINTAINER_WARNINGS=OFF \
          -DZLIB_COMPAT=OFF
        cmake --build .
        cmake --install .
      # env:
      #   CC: gccc
      #   CXX: g++
      # run: |
      #   pwd
      #   ls -l
      #   cmake -G Ninja
      #     --prefix ${{ env.zlib-install }} --libdir ${{ env.zlib-install }}/lib  --zlib-compat
      #   make
      #   make test
      #   make install
      working-directory: ${{ env.zlib-source }}
      shell: bash

    - name: Show ${{ env.zlib-install }}
      run: |
        find ${{ env.zlib-install }}
      shell: bash

    - name: Setup perl
      uses: shogo82148/actions-setup-perl@v1
      with:
        perl-version: ${{ matrix.perl }}

    - name: Perl version
      run: perl -V
      shell: cmd

    #- name: Install dependencies
    #  run: |
    #    cpanm --verbose --installdeps --notest .

    - name: Set Env Windows
      run: |
        echo "ZLIB_LIB=${GITHUB_WORKSPACE}\upstream-zlib-install-${{ matrix.zlib-version }}\lib"            >> $GITHUB_ENV
        echo "ZLIB_INCLUDE=${GITHUB_WORKSPACE}\upstream-zlib-install-${{ matrix.zlib-version }}\include"    >> $GITHUB_ENV
        echo "ZLIB_VERSION=${{ matrix.zlib-version }}"                                          >> $GITHUB_ENV
        echo "BUILD_ZLIB=0"                                                                     >> $GITHUB_ENV
        echo "ZLIB_NG_PRESENT=1"                                                                >> $GITHUB_ENV
        echo "USE_ZLIB_NG=${{ matrix.zlib-native }}"                                            >> $GITHUB_ENV
      shell: cmd

    - name: Set Env
      run: |
        set
      shell: cmd

    - name: Set Env
      run: |
        env | sort
      shell: bash

    - name: Build
      run: |
        perl.exe Makefile.PL && make
      shell: cmd

    - name: Test
      run: make test
      shell: cmd
